{"ast":null,"code":"var _jsxFileName = \"/Users/reed/keloid/CS-497-keloid/src/ImageUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport './ImageUploader.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = \"https://64ce-35-237-123-73.ngrok-free.app/\";\nfunction ImageUploader() {\n  _s();\n  const [imageLoaded, setImageLoaded] = useState(false); // New state to track if image is loaded\n  const [coordinates, setCoordinates] = useState([]);\n  const [imageFile, setImageFile] = useState(null); // New state to store the image file\n  const canvasRef = useRef(null);\n  const lesionRef = useRef(null);\n  const imageLoaderRef = useRef(null);\n  const imgRef = useRef(null); // Ref to store the loaded image element\n  const lesionImageRef = useRef(null);\n  const coinImageRef = useRef(null);\n  const [rect, setRect] = useState({});\n  const [drag, setDrag] = useState(false);\n  const [mode, setMode] = useState(\"draw\"); // Default mode is \"draw\"\n  const [globalScaleFactor, setGlobalScaleFactor] = useState(1);\n  const [pixelPerMetric, setPixelPerMetric] = useState(false);\n  const [pointCoordinates, setPointCoordinates] = useState([]);\n  const [pointLabels, setPointLabels] = useState([]); // New state to store the point labels\n  // const [originalCanvasSize, setOriginalCanvasSize] = useState([0, 0]);\n  const arrayBufferToBase64 = buffer => {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n  };\n  const handleImage = e => {\n    const reader = new FileReader();\n    setImageFile(e.target.files[0]); // Store the image file in state\n    reader.onload = event => {\n      const img = new Image();\n      img.onload = () => {\n        const canvas = canvasRef.current;\n        // setOriginalCanvasSize([canvas.width, canvas.height]);\n        const ctx = canvas.getContext('2d');\n        // ctx.clearRect(0, 0, canvas.width, canvas.height);\n        // console.log('Image loaded:', img.width, img.height);\n        // Use a fixed width for the canvas\n        const scaleFactor = 700 / img.width;\n        setGlobalScaleFactor(scaleFactor);\n        const scaledHeight = img.height * scaleFactor;\n        // const scaleFactor = 700 / img.width;\n        // const scaledHeight = img.height;\n\n        // Set canvas size\n        canvas.width = 700;\n        canvas.height = scaledHeight;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(img, 0, 0, canvas.width, scaledHeight);\n        imgRef.current = img;\n        setImageLoaded(true); // Indicate that the image is now loaded\n      };\n      img.src = event.target.result;\n    };\n    reader.readAsDataURL(e.target.files[0]);\n  };\n  const handleUploadImage = async event => {\n    // const canvas = canvasRef.current;\n    // const imageData = canvas.toDataURL('image/jpeg'); // Convert canvas to base64 data URL\n    event.preventDefault();\n    const formData = new FormData();\n    formData.append('file', imageFile);\n    // console.log('Image data:', formData);\n    // for (let pair of formData.entries()) {\n    //   console.log(pair[0] + ': ' + pair[1]);\n    // }\n\n    // You can now send the imageData to your backend using Axios or any other HTTP library\n    axios.post(`${baseURL}upload/`, formData).then(response => {\n      console.log('Image uploaded successfully:', response.data);\n\n      // const imageUrl = URL.createObjectURL(blob);\n\n      // Now you can use the imageUrl to display the image in your React component\n      // For example, you can set it as the src attribute of an <img> element\n      // document.getElementById('imageElement').src = imageUrl\n      // Optionally, handle success response\n    }).catch(error => {\n      console.error('Error uploading image:', error);\n      // Optionally, handle error\n    });\n  };\n  const handleCoin = async event => {\n    event.preventDefault();\n    const RectangleData = {\n      x: coordinates[coordinates.length - 1].startX / globalScaleFactor,\n      y: coordinates[coordinates.length - 1].startY / globalScaleFactor,\n      width: coordinates[coordinates.length - 1].w / globalScaleFactor,\n      height: coordinates[coordinates.length - 1].h / globalScaleFactor\n    };\n    console.log('Rectangle data:', RectangleData);\n    axios.post(`${baseURL}uploadCoin/`, RectangleData, {\n      responseType: 'arraybuffer'\n    }).then(response => {\n      console.log('Image uploaded successfully:', response.data);\n      // const { img, pixelsPerMetric: ppm } = response.data;\n      // console.log('Image:', img);\n      // console.log('Pixels per metric:', ppm);\n      const base64Image = arrayBufferToBase64(response.data);\n      setPixelPerMetric(true);\n      const image = new Image();\n\n      // Set the src of the image to the data received from the backend\n      image.src = `data:image/jpeg;base64,${base64Image}`;\n      image.onload = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n        // Convert BGR to RGB\n        for (let i = 0; i < imageData.data.length; i += 4) {\n          const temp = imageData.data[i];\n          imageData.data[i] = imageData.data[i + 2];\n          imageData.data[i + 2] = temp;\n        }\n        ctx.putImageData(imageData, 0, 0);\n        coinImageRef.current = image;\n        setImageLoaded(true); // Indicate that the image is now loaded\n      };\n    }).catch(error => {\n      console.error('Error uploading image:', error);\n      // Optionally, handle error\n    });\n  };\n  const handleSubmitPoints = async event => {\n    event.preventDefault();\n    // const PointData = {\n    //   points: pointCoordinates.map(coord => ({ x: coord.x/globalScaleFactor, y: coord.y/globalScaleFactor }))\n    // };\n    // need to add the labels to PointData\n    const PointData = {\n      points: pointCoordinates.map((coord, index) => ({\n        x: coord.x / globalScaleFactor,\n        y: coord.y / globalScaleFactor,\n        label: pointLabels[index]\n      }))\n    };\n    console.log('Point data:', PointData);\n    axios.post(`${baseURL}uploadPoints/`, PointData, {\n      responseType: 'arraybuffer'\n    }).then(response => {\n      console.log('Image uploaded successfully:', response.data);\n      const base64Image = arrayBufferToBase64(response.data);\n      const image = new Image();\n\n      // Set the src of the image to the data received from the backend\n      image.src = `data:image/jpeg;base64,${base64Image}`;\n      image.onload = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n        // Convert BGR to RGB\n        for (let i = 0; i < imageData.data.length; i += 4) {\n          const temp = imageData.data[i];\n          imageData.data[i] = imageData.data[i + 2];\n          imageData.data[i + 2] = temp;\n        }\n        ctx.putImageData(imageData, 0, 0);\n        // imgRef.current = image;\n        setImageLoaded(true); // Indicate that the image is now loaded\n      };\n    }).catch(error => {\n      console.error('Error uploading image:', error);\n      // Optionally, handle error\n    });\n  };\n  const handleConfirmLesion = async event => {\n    event.preventDefault();\n    axios.post(`${baseURL}confirmLesion/`, {}, {\n      responseType: 'arraybuffer'\n    }).then(response => {\n      console.log('Confirm lesion successfully:', response.data);\n      const base64Image = arrayBufferToBase64(response.data);\n      const image = new Image();\n\n      // Set the src of the image to the data received from the backend\n      image.src = `data:image/jpeg;base64,${base64Image}`;\n      image.onload = () => {\n        const canvas = lesionRef.current;\n        const ctx = canvas.getContext('2d');\n        const scaleFactor = 700 / image.width;\n        // setGlobalScaleFactor(scaleFactor);\n        const scaledHeight = image.height * scaleFactor;\n        // const scaleFactor = 700 / img.width;\n        // const scaledHeight = img.height;\n\n        // Set canvas size\n        canvas.width = 700;\n        canvas.height = scaledHeight;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n        // Convert BGR to RGB\n        for (let i = 0; i < imageData.data.length; i += 4) {\n          const temp = imageData.data[i];\n          imageData.data[i] = imageData.data[i + 2];\n          imageData.data[i + 2] = temp;\n        }\n        ctx.putImageData(imageData, 0, 0);\n        lesionImageRef.current = image;\n        const canvas2 = canvasRef.current;\n        const ctx2 = canvas2.getContext('2d');\n        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n        ctx2.drawImage(imgRef.current, 0, 0, canvas2.width, canvas2.height);\n        setPointCoordinates([]);\n        setPointLabels([]);\n      };\n    }).catch(error => {\n      console.error('Error uploading image:', error);\n      // Optionally, handle error\n    });\n  };\n  const handleCoinConfirm = async event => {\n    event.preventDefault();\n    axios.post(`${baseURL}confirmCoin/`, {}, {\n      responseType: 'arraybuffer'\n    }).then(response => {\n      console.log('Confirm coin successfully:', response.data);\n      // const base64Image = arrayBufferToBase64(response.data);\n      const image = new Image();\n\n      // Set the src of the image to the data received from the backend\n      image.src = coinImageRef.current.src;\n      // image.onload = () => {\n      const canvas = lesionRef.current;\n      const ctx = canvas.getContext('2d');\n      const scaleFactor = 700 / image.width;\n      // setGlobalScaleFactor(scaleFactor);\n      const scaledHeight = image.height * scaleFactor;\n      // const scaleFactor = 700 / img.width;\n      // const scaledHeight = img.height;\n\n      // Set canvas size\n      canvas.width = 700;\n      canvas.height = scaledHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n      // Convert BGR to RGB\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const temp = imageData.data[i];\n        imageData.data[i] = imageData.data[i + 2];\n        imageData.data[i + 2] = temp;\n      }\n      ctx.putImageData(imageData, 0, 0);\n      // lesionImageRef.current = image;\n\n      const canvas2 = canvasRef.current;\n      const ctx2 = canvas2.getContext('2d');\n      ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n      ctx2.drawImage(imgRef.current, 0, 0, canvas2.width, canvas2.height);\n\n      // setPointCoordinates([]);\n      // setPointLabels([]);\n      // }\n    }).catch(error => {\n      console.error('Error uploading image:', error);\n      // Optionally, handle error\n    });\n  };\n  const handleDownloadPdf = async event => {\n    event.preventDefault();\n    axios.post(`${baseURL}downloadPdf/`, {}, {\n      responseType: 'arraybuffer'\n    }).then(response => {\n      const blob = new Blob([response.data], {\n        type: 'application/pdf'\n      });\n\n      // Create a URL for the Blob object\n      const url = URL.createObjectURL(blob);\n\n      // Create an anchor element\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'keloid_patch.pdf'; // Specify the filename for the downloaded file\n\n      // Programmatically trigger a click event on the anchor element\n      document.body.appendChild(link);\n      link.click();\n\n      // Clean up\n      URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n    }).catch(error => {\n      console.error('Error downloading PDF:', error);\n    });\n  };\n\n  // const handleRemoveImage = () => {\n  //   const canvas = canvasRef.current;\n  //   const ctx = canvas.getContext('2d');\n  //   ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  //   setImageLoaded(false);\n  //   setCoordinates([]);\n  //   setRect({});\n  //   setDrag(false);\n\n  //   if (imageLoaderRef.current) {\n  //     imageLoaderRef.current.value = null;\n  //   }\n  // }\n\n  const initDraw = event => {\n    if (!imageLoaded) return;\n    // console.log(event);\n    // console.log(event.nativeEvent);\n    const x = event.nativeEvent.offsetX;\n    const y = event.nativeEvent.offsetY;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (mode === \"draw\") {\n      setRect({\n        startX: x,\n        startY: y,\n        w: 0,\n        h: 0\n      });\n      setDrag(true);\n    } else if (mode === \"pos\" || mode === \"neg\") {\n      if (mode === \"pos\") {\n        setPointLabels([...pointLabels, 1]);\n        ctx.fillStyle = 'green';\n      } else {\n        setPointLabels([...pointLabels, 0]);\n        ctx.fillStyle = 'red';\n      }\n      ctx.beginPath();\n      ctx.arc(x, y, 5, 0, Math.PI * 2, true); // Draw a circle\n      ctx.fill();\n      setPointCoordinates([...pointCoordinates, {\n        x,\n        y\n      }]);\n\n      // setCoordinates([...coordinates, { startX: x, startY: y, w: 0, h: 0 }]);\n    }\n  };\n  const draw = event => {\n    if (!imageLoaded || !drag || mode !== \"draw\") return;\n    const mouseX = event.nativeEvent.offsetX;\n    const mouseY = event.nativeEvent.offsetY;\n    const width = mouseX - rect.startX;\n    const height = mouseY - rect.startY;\n    setRect({\n      ...rect,\n      w: width,\n      h: height\n    });\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n    ctx.strokeStyle = 'red';\n    ctx.strokeRect(rect.startX, rect.startY, width, height);\n    redraw(ctx); // Redraw the rectangles after drawing the current rectangle\n  };\n  const finishDraw = () => {\n    if (!imageLoaded || mode === \"pos\" || mode === \"neg\") return; // Skip if in point mode\n    setDrag(false);\n    setCoordinates([...coordinates, rect]);\n  };\n  const redraw = ctx => {\n    coordinates.forEach(coord => {\n      if (coord.w === 0 && coord.h === 0) {\n        ctx.fillStyle = 'red';\n        ctx.beginPath();\n        ctx.arc(coord.startX, coord.startY, 5, 0, 2 * Math.PI);\n        ctx.fill();\n      } else {\n        ctx.strokeStyle = 'red';\n        ctx.strokeRect(coord.startX, coord.startY, coord.w, coord.h);\n      }\n    });\n  };\n  const undoLastAction = () => {\n    if (mode === \"draw\") {\n      setCoordinates(prevCoordinates => {\n        const newCoordinates = prevCoordinates.slice(0, -1);\n\n        // Redraw the canvas\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n\n        // Redraw all the elements except the last one\n        newCoordinates.forEach(coord => {\n          if (coord.w === 0 && coord.h === 0) {\n            ctx.fillStyle = 'red';\n            ctx.beginPath();\n            ctx.arc(coord.startX, coord.startY, 5, 0, Math.PI * 2);\n            ctx.fill();\n          } else {\n            ctx.strokeStyle = 'red';\n            ctx.strokeRect(coord.startX, coord.startY, coord.w, coord.h);\n          }\n        });\n        return newCoordinates;\n      });\n    } else {\n      setPointLabels(prevLabels => {\n        return prevLabels.slice(0, -1);\n      });\n      setPointCoordinates(prevCoordinates => {\n        const newCoordinates = prevCoordinates.slice(0, -1);\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n        newCoordinates.forEach((coord, index) => {\n          if (pointLabels[index] === 1) {\n            ctx.fillStyle = 'green';\n          } else {\n            ctx.fillStyle = 'red';\n          }\n          ctx.beginPath();\n          ctx.arc(coord.x, coord.y, 5, 0, Math.PI * 2);\n          ctx.fill();\n        });\n        return newCoordinates;\n      });\n    }\n  };\n  const toggleMode = () => {\n    setMode(prevMode => {\n      switch (prevMode) {\n        case \"draw\":\n          return \"pos\";\n        case \"pos\":\n          return \"neg\";\n        case \"neg\":\n          return \"draw\";\n        default:\n          return \"draw\";\n        // Default to \"draw\" mode if current mode is unknown\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"keloid-detector-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Mode: \", mode === \"draw\" ? \"Drawing Rectangles\" : mode === \"pos\" ? \"Selecting Positive Points\" : \"Selecting Negative Points\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      ref: imageLoaderRef,\n      onChange: handleImage,\n      className: \"file-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onMouseDown: initDraw,\n      onMouseMove: draw,\n      onMouseUp: finishDraw,\n      className: \"image-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUploadImage,\n          className: \"remove-image-btn\",\n          children: \"Upload Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCoin,\n          className: \"remove-image-btn\",\n          children: \"Establish reference\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCoinConfirm,\n          className: \"remove-image-btn\",\n          children: \"Confirm reference\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"undo-rectangle-btn\",\n          onClick: undoLastAction,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleMode,\n          className: \"toggle-mode-btn\",\n          children: mode === \"draw\" ? \"Draw Mode\" : mode === \"pos\" ? \"Positive Point Mode\" : \"Negative Point Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmitPoints,\n          className: \"remove-image-btn\",\n          children: \"Find Lesion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleConfirmLesion,\n          className: \"remove-image-btn\",\n          children: \"Confirm Lesion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDownloadPdf,\n          className: \"remove-image-btn\",\n          children: \"Download Patch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coordinates-display\",\n      children: [\"Reference Object: \", pixelPerMetric ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"is defined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 83\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Not defined yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coordinates-display\",\n      children: [\"Box Coordinates: \", coordinates.map((coord, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coordinate-item\",\n        children: [\"Start (\", coord.startX, \", \", coord.startY, \"), End (\", coord.startX + coord.w, \", \", coord.startY + coord.h, \")\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coordinates-display\",\n      children: [\"Point Coordinates: \", pointCoordinates.map((coord, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coordinate-item\",\n        children: [\"X: (\", coord.x, \", Y: \", coord.y, \")\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Lesion Area:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: lesionRef,\n      className: \"lesion-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 465,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageUploader, \"bVJVTIxX0JidNZSnRcXz9I/EIC8=\");\n_c = ImageUploader;\nexport default ImageUploader;\nvar _c;\n$RefreshReg$(_c, \"ImageUploader\");","map":{"version":3,"names":["React","useRef","useState","axios","jsxDEV","_jsxDEV","baseURL","ImageUploader","_s","imageLoaded","setImageLoaded","coordinates","setCoordinates","imageFile","setImageFile","canvasRef","lesionRef","imageLoaderRef","imgRef","lesionImageRef","coinImageRef","rect","setRect","drag","setDrag","mode","setMode","globalScaleFactor","setGlobalScaleFactor","pixelPerMetric","setPixelPerMetric","pointCoordinates","setPointCoordinates","pointLabels","setPointLabels","arrayBufferToBase64","buffer","binary","bytes","Uint8Array","i","byteLength","String","fromCharCode","btoa","handleImage","e","reader","FileReader","target","files","onload","event","img","Image","canvas","current","ctx","getContext","scaleFactor","width","scaledHeight","height","clearRect","drawImage","src","result","readAsDataURL","handleUploadImage","preventDefault","formData","FormData","append","post","then","response","console","log","data","catch","error","handleCoin","RectangleData","x","length","startX","y","startY","w","h","responseType","base64Image","image","imageData","getImageData","temp","putImageData","handleSubmitPoints","PointData","points","map","coord","index","label","handleConfirmLesion","canvas2","ctx2","handleCoinConfirm","handleDownloadPdf","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","revokeObjectURL","removeChild","initDraw","nativeEvent","offsetX","offsetY","fillStyle","beginPath","arc","Math","PI","fill","draw","mouseX","mouseY","strokeStyle","strokeRect","redraw","finishDraw","forEach","undoLastAction","prevCoordinates","newCoordinates","slice","prevLabels","toggleMode","prevMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onChange","onMouseDown","onMouseMove","onMouseUp","onClick","_c","$RefreshReg$"],"sources":["/Users/reed/keloid/CS-497-keloid/src/ImageUploader.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport './ImageUploader.css';\nimport axios from 'axios';\n\nconst baseURL = \"https://64ce-35-237-123-73.ngrok-free.app/\";\n\nfunction ImageUploader() {\n  const [imageLoaded, setImageLoaded] = useState(false); // New state to track if image is loaded\n  const [coordinates, setCoordinates] = useState([]);\n  const [imageFile, setImageFile] = useState(null); // New state to store the image file\n  const canvasRef = useRef(null);\n  const lesionRef = useRef(null);\n  const imageLoaderRef = useRef(null);\n  const imgRef = useRef(null); // Ref to store the loaded image element\n  const lesionImageRef = useRef(null);\n  const coinImageRef = useRef(null);\n  const [rect, setRect] = useState({});\n  const [drag, setDrag] = useState(false);\n  const [mode, setMode] = useState(\"draw\"); // Default mode is \"draw\"\n  const [globalScaleFactor, setGlobalScaleFactor] = useState(1);\n  const [pixelPerMetric, setPixelPerMetric] = useState(false);\n  const [pointCoordinates, setPointCoordinates] = useState([]);\n  const [pointLabels, setPointLabels] = useState([]); // New state to store the point labels\n  // const [originalCanvasSize, setOriginalCanvasSize] = useState([0, 0]);\n  const arrayBufferToBase64 = (buffer) => {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n  };\n  const handleImage = (e) => {\n    const reader = new FileReader();\n    setImageFile(e.target.files[0]); // Store the image file in state\n    reader.onload = (event) => {\n      const img = new Image();\n      img.onload = () => {\n        const canvas = canvasRef.current;\n        // setOriginalCanvasSize([canvas.width, canvas.height]);\n        const ctx = canvas.getContext('2d');\n        // ctx.clearRect(0, 0, canvas.width, canvas.height);\n        // console.log('Image loaded:', img.width, img.height);\n        // Use a fixed width for the canvas\n        const scaleFactor = 700 / img.width;\n        setGlobalScaleFactor(scaleFactor);\n        const scaledHeight = img.height * scaleFactor;\n        // const scaleFactor = 700 / img.width;\n        // const scaledHeight = img.height;\n        \n        // Set canvas size\n        canvas.width = 700; \n        canvas.height = scaledHeight;\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(img, 0, 0, canvas.width, scaledHeight);\n        imgRef.current = img;\n        setImageLoaded(true); // Indicate that the image is now loaded\n      };\n      img.src = event.target.result;\n    };\n    \n    reader.readAsDataURL(e.target.files[0]);\n  };\n\n  const handleUploadImage = async (event) => {\n    // const canvas = canvasRef.current;\n  // const imageData = canvas.toDataURL('image/jpeg'); // Convert canvas to base64 data URL\n  event.preventDefault();\n  const formData = new FormData();\n  formData.append('file', imageFile);\n  // console.log('Image data:', formData);\n  // for (let pair of formData.entries()) {\n  //   console.log(pair[0] + ': ' + pair[1]);\n  // }\n\n  // You can now send the imageData to your backend using Axios or any other HTTP library\n  axios.post(`${baseURL}upload/`, formData )\n    .then(response => {\n      console.log('Image uploaded successfully:', response.data);\n      \n      // const imageUrl = URL.createObjectURL(blob);\n      \n      // Now you can use the imageUrl to display the image in your React component\n      // For example, you can set it as the src attribute of an <img> element\n      // document.getElementById('imageElement').src = imageUrl\n      // Optionally, handle success response\n    })\n    .catch(error => {\n      console.error('Error uploading image:', error);\n      // Optionally, handle error\n    });\n};\n\nconst handleCoin = async (event) => {\n  event.preventDefault();\n  const RectangleData = {\n    x: coordinates[coordinates.length-1].startX/globalScaleFactor,\n    y: coordinates[coordinates.length-1].startY/globalScaleFactor,\n    width: coordinates[coordinates.length-1].w/globalScaleFactor,\n    height: coordinates[coordinates.length-1].h/globalScaleFactor\n  };\n  console.log('Rectangle data:', RectangleData);\n  axios.post(`${baseURL}uploadCoin/`, RectangleData, {responseType: 'arraybuffer'})\n    .then(response => {\n      console.log('Image uploaded successfully:', response.data);\n      // const { img, pixelsPerMetric: ppm } = response.data;\n      // console.log('Image:', img);\n      // console.log('Pixels per metric:', ppm);\n      const base64Image = arrayBufferToBase64(response.data);\n      setPixelPerMetric(true);\n      const image = new Image();\n\n        // Set the src of the image to the data received from the backend\n      image.src = `data:image/jpeg;base64,${base64Image}`;\n      image.onload = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n          // Convert BGR to RGB\n          for (let i = 0; i < imageData.data.length; i += 4) {\n            const temp = imageData.data[i];\n            imageData.data[i] = imageData.data[i + 2];\n            imageData.data[i + 2] = temp;\n          }\n          ctx.putImageData(imageData, 0, 0);\n        coinImageRef.current = image;\n        setImageLoaded(true); // Indicate that the image is now loaded\n      }\n    })\n    .catch(error => {\n      console.error('Error uploading image:', error);\n      // Optionally, handle error\n    });\n    \n};\n\nconst handleSubmitPoints = async (event) => {\n  event.preventDefault();\n  // const PointData = {\n  //   points: pointCoordinates.map(coord => ({ x: coord.x/globalScaleFactor, y: coord.y/globalScaleFactor }))\n  // };\n  // need to add the labels to PointData\n  const PointData = {\n    points: pointCoordinates.map((coord, index) => ({ x: coord.x/globalScaleFactor, y: coord.y/globalScaleFactor, label: pointLabels[index] }))\n  };\n\n  console.log('Point data:', PointData);\n  axios.post(`${baseURL}uploadPoints/`, PointData, {responseType: 'arraybuffer'})\n    .then(response => {\n      console.log('Image uploaded successfully:', response.data);\n      const base64Image = arrayBufferToBase64(response.data);\n      const image = new Image();\n\n        // Set the src of the image to the data received from the backend\n      image.src = `data:image/jpeg;base64,${base64Image}`;\n      image.onload = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n          // Convert BGR to RGB\n          for (let i = 0; i < imageData.data.length; i += 4) {\n            const temp = imageData.data[i];\n            imageData.data[i] = imageData.data[i + 2];\n            imageData.data[i + 2] = temp;\n          }\n          ctx.putImageData(imageData, 0, 0);\n        // imgRef.current = image;\n        setImageLoaded(true); // Indicate that the image is now loaded\n      }\n    })\n    .catch(error => {\n      console.error('Error uploading image:', error);\n      // Optionally, handle error\n    });\n\n};\n\nconst handleConfirmLesion = async (event) => {\n  event.preventDefault();\n  axios.post(`${baseURL}confirmLesion/`, {}, {responseType: 'arraybuffer'})\n    .then(response => {\n      console.log('Confirm lesion successfully:', response.data);\n      const base64Image = arrayBufferToBase64(response.data);\n      const image = new Image();\n\n        // Set the src of the image to the data received from the backend\n      image.src = `data:image/jpeg;base64,${base64Image}`;\n      image.onload = () => {\n        const canvas = lesionRef.current;\n        const ctx = canvas.getContext('2d');\n        const scaleFactor = 700 / image.width;\n        // setGlobalScaleFactor(scaleFactor);\n        const scaledHeight = image.height * scaleFactor;\n        // const scaleFactor = 700 / img.width;\n        // const scaledHeight = img.height;\n        \n        // Set canvas size\n        canvas.width = 700; \n        canvas.height = scaledHeight;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n          // Convert BGR to RGB\n          for (let i = 0; i < imageData.data.length; i += 4) {\n            const temp = imageData.data[i];\n            imageData.data[i] = imageData.data[i + 2];\n            imageData.data[i + 2] = temp;\n          }\n          ctx.putImageData(imageData, 0, 0);\n        lesionImageRef.current = image;\n\n        const canvas2 = canvasRef.current;\n        const ctx2 = canvas2.getContext('2d');\n        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n        ctx2.drawImage(imgRef.current, 0, 0, canvas2.width, canvas2.height);\n\n        setPointCoordinates([]);\n        setPointLabels([]);\n      }\n    })\n    .catch(error => {\n      console.error('Error uploading image:', error);\n      // Optionally, handle error\n    });\n};\n\nconst handleCoinConfirm = async (event) => {\n  event.preventDefault();\n  axios.post(`${baseURL}confirmCoin/`, {}, {responseType: 'arraybuffer'})\n    .then(response => {\n      console.log('Confirm coin successfully:', response.data);\n      // const base64Image = arrayBufferToBase64(response.data);\n      const image = new Image();\n\n        // Set the src of the image to the data received from the backend\n      image.src = coinImageRef.current.src;\n      // image.onload = () => {\n        const canvas = lesionRef.current;\n        const ctx = canvas.getContext('2d');\n        const scaleFactor = 700 / image.width;\n        // setGlobalScaleFactor(scaleFactor);\n        const scaledHeight = image.height * scaleFactor;\n        // const scaleFactor = 700 / img.width;\n        // const scaledHeight = img.height;\n        \n        // Set canvas size\n        canvas.width = 700; \n        canvas.height = scaledHeight;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n          // Convert BGR to RGB\n          for (let i = 0; i < imageData.data.length; i += 4) {\n            const temp = imageData.data[i];\n            imageData.data[i] = imageData.data[i + 2];\n            imageData.data[i + 2] = temp;\n          }\n          ctx.putImageData(imageData, 0, 0);\n        // lesionImageRef.current = image;\n\n        const canvas2 = canvasRef.current;\n        const ctx2 = canvas2.getContext('2d');\n        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n        ctx2.drawImage(imgRef.current, 0, 0, canvas2.width, canvas2.height);\n\n        // setPointCoordinates([]);\n        // setPointLabels([]);\n      // }\n    })\n    .catch(error => {\n      console.error('Error uploading image:', error);\n      // Optionally, handle error\n    });\n};\n\nconst handleDownloadPdf = async (event) => {\n  event.preventDefault();\n  axios.post(`${baseURL}downloadPdf/`, {}, {responseType: 'arraybuffer'})\n  .then(response => {\n    const blob = new Blob([response.data], { type: 'application/pdf' });\n        \n    // Create a URL for the Blob object\n    const url = URL.createObjectURL(blob);\n    \n    // Create an anchor element\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'keloid_patch.pdf'; // Specify the filename for the downloaded file\n    \n    // Programmatically trigger a click event on the anchor element\n    document.body.appendChild(link);\n    link.click();\n    \n    // Clean up\n    URL.revokeObjectURL(url);\n    document.body.removeChild(link);\n  })\n  .catch(error => {\n    console.error('Error downloading PDF:', error);\n  });\n};\n\n  // const handleRemoveImage = () => {\n  //   const canvas = canvasRef.current;\n  //   const ctx = canvas.getContext('2d');\n  //   ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n  //   setImageLoaded(false);\n  //   setCoordinates([]);\n  //   setRect({});\n  //   setDrag(false);\n    \n  //   if (imageLoaderRef.current) {\n  //     imageLoaderRef.current.value = null;\n  //   }\n  // }\n\n  const initDraw = (event) => {\n    if (!imageLoaded) return; \n    // console.log(event);\n    // console.log(event.nativeEvent);\n    const x = event.nativeEvent.offsetX;\n    const y = event.nativeEvent.offsetY;\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n\n\n    if (mode === \"draw\") {\n      setRect({ startX: x, startY: y, w: 0, h: 0 });\n      setDrag(true);\n    } else if (mode === \"pos\" || mode === \"neg\") {\n      if (mode === \"pos\") {\n        setPointLabels([...pointLabels, 1]);\n        ctx.fillStyle = 'green';\n      } else {\n        setPointLabels([...pointLabels, 0]);\n        ctx.fillStyle = 'red';\n      }\n      ctx.beginPath();\n      ctx.arc(x, y, 5, 0, Math.PI * 2, true); // Draw a circle\n      ctx.fill();\n      setPointCoordinates([...pointCoordinates, { x, y }]);\n      \n\n      // setCoordinates([...coordinates, { startX: x, startY: y, w: 0, h: 0 }]);\n    }\n  };\n\n  const draw = (event) => {\n    if (!imageLoaded || !drag || mode !== \"draw\") return;\n    const mouseX = event.nativeEvent.offsetX;\n    const mouseY = event.nativeEvent.offsetY;\n    const width = mouseX - rect.startX;\n    const height = mouseY - rect.startY;\n    setRect({ ...rect, w: width, h: height });\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n    ctx.strokeStyle = 'red';\n    ctx.strokeRect(rect.startX, rect.startY, width, height);\n    redraw(ctx); // Redraw the rectangles after drawing the current rectangle\n\n  };\n\n  const finishDraw = () => {\n    if (!imageLoaded || mode === \"pos\"|| mode === \"neg\") return; // Skip if in point mode\n    setDrag(false);\n    setCoordinates([...coordinates, rect]);\n  };\n\n  const redraw= (ctx) => {\n    coordinates.forEach(coord => {\n      if (coord.w === 0 && coord.h === 0) {\n        ctx.fillStyle = 'red';\n        ctx.beginPath();\n        ctx.arc(coord.startX, coord.startY, 5, 0, 2 * Math.PI);\n        ctx.fill();\n      } else {\n        ctx.strokeStyle = 'red';\n        ctx.strokeRect(coord.startX, coord.startY, coord.w, coord.h);\n      }\n  });\n};\n\n  const undoLastAction = () => {\n    if (mode === \"draw\") {\n    setCoordinates(prevCoordinates => {\n      const newCoordinates = prevCoordinates.slice(0, -1);\n  \n      // Redraw the canvas\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n      \n      // Redraw all the elements except the last one\n      newCoordinates.forEach(coord => {\n        if (coord.w === 0 && coord.h === 0) {\n          ctx.fillStyle = 'red';\n          ctx.beginPath();\n          ctx.arc(coord.startX, coord.startY, 5, 0, Math.PI * 2);\n          ctx.fill();\n        } else {\n          ctx.strokeStyle = 'red';\n          ctx.strokeRect(coord.startX, coord.startY, coord.w, coord.h);\n        }\n      });\n  \n      return newCoordinates;\n    }); \n  } else {\n    setPointLabels(prevLabels => {\n      return prevLabels.slice(0, -1);\n    });\n    setPointCoordinates(prevCoordinates => {\n      const newCoordinates = prevCoordinates.slice(0, -1);\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n      newCoordinates.forEach((coord, index) => {\n        if (pointLabels[index] === 1) {\n          ctx.fillStyle = 'green';\n        } else {\n          ctx.fillStyle = 'red';\n        }\n        ctx.beginPath();\n        ctx.arc(coord.x, coord.y, 5, 0, Math.PI * 2);\n        ctx.fill();\n      });\n      return newCoordinates;\n    });\n  }\n  };\n\n  const toggleMode = () => {\n    setMode(prevMode => {\n      switch (prevMode) {\n        case \"draw\":\n          return \"pos\";\n        case \"pos\":\n          return \"neg\";\n        case \"neg\":\n          return \"draw\";\n        default:\n          return \"draw\"; // Default to \"draw\" mode if current mode is unknown\n      }\n    });\n  };\n  \n\n  return (\n    <div className=\"keloid-detector-container\">\n      <h3>Mode: {mode === \"draw\" ? \"Drawing Rectangles\" : mode === \"pos\" ? \"Selecting Positive Points\" : \"Selecting Negative Points\"}</h3>\n\n      <input type=\"file\" ref={imageLoaderRef} onChange={handleImage} className=\"file-input\" />\n      <canvas ref={canvasRef} onMouseDown={initDraw} onMouseMove={draw} onMouseUp={finishDraw} className=\"image-canvas\"></canvas>\n      <div className=\"button-grid\">\n      <div className=\"column\">\n        <button onClick={handleUploadImage} className=\"remove-image-btn\">Upload Image</button>\n        <button onClick={handleCoin} className=\"remove-image-btn\">Establish reference</button>\n        <button onClick={handleCoinConfirm} className=\"remove-image-btn\">Confirm reference</button>\n        <button className=\"undo-rectangle-btn\" onClick={undoLastAction}>Undo</button>\n        {/* <button className=\"print-coordinates-btn\" onClick={() => alert(JSON.stringify(coordinates))}>Print Coord</button> */}\n      </div>\n      <div className=\"column\">\n        \n        <button onClick={toggleMode} className=\"toggle-mode-btn\">\n        {mode === \"draw\" ? \"Draw Mode\" : mode === \"pos\" ? \"Positive Point Mode\" : \"Negative Point Mode\"}\n        </button>\n        <button onClick={handleSubmitPoints} className=\"remove-image-btn\">Find Lesion</button>\n        <button onClick={handleConfirmLesion} className=\"remove-image-btn\">Confirm Lesion</button>\n        <button onClick={handleDownloadPdf} className=\"remove-image-btn\">Download Patch</button>\n        </div>\n        </div>\n        <div className=\"coordinates-display\">Reference Object: {pixelPerMetric ? (<p>is defined</p>) \n        : (<p>Not defined yet</p>)}</div>\n        <div className=\"coordinates-display\">Box Coordinates: {coordinates.map((coord, index) => (\n          <div key={index} className=\"coordinate-item\">\n            Start ({coord.startX}, {coord.startY}), End ({coord.startX + coord.w}, {coord.startY + coord.h})\n          </div>\n      ))}</div>\n      <div className=\"coordinates-display\">Point Coordinates: {pointCoordinates.map((coord, index) => (\n          <div key={index} className=\"coordinate-item\">\n            X: ({coord.x}, Y: {coord.y})\n          </div>\n      ))}</div>\n      <h4>Lesion Area:</h4>\n      <canvas ref={lesionRef} className=\"lesion-canvas\"></canvas>\n    </div>\n  );\n}\n\nexport default ImageUploader;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}