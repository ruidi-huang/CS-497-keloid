{"ast":null,"code":"var _jsxFileName = \"/Users/reed/keloid/CS-497-keloid/src/ImageUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport './ImageUploader.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = \"https://acbb-35-237-172-233.ngrok-free.app/\";\nfunction ImageUploader() {\n  _s();\n  const [imageLoaded, setImageLoaded] = useState(false); // New state to track if image is loaded\n  const [coordinates, setCoordinates] = useState([]);\n  const [imageFile, setImageFile] = useState(null); // New state to store the image file\n  const canvasRef = useRef(null);\n  const imageLoaderRef = useRef(null);\n  const imgRef = useRef(null); // Ref to store the loaded image element\n  const [rect, setRect] = useState({});\n  const [drag, setDrag] = useState(false);\n  const [mode, setMode] = useState(\"draw\"); // Default mode is \"draw\"\n  const [originalCanvasSize, setOriginalCanvasSize] = useState([0, 0]);\n  const handleImage = e => {\n    const reader = new FileReader();\n    setImageFile(e.target.files[0]); // Store the image file in state\n    reader.onload = event => {\n      const img = new Image();\n      img.onload = () => {\n        const canvas = canvasRef.current;\n        setOriginalCanvasSize([canvas.width, canvas.height]);\n        const ctx = canvas.getContext('2d');\n        console.log('Image loaded:', img.width, img.height);\n        // Use a fixed width for the canvas\n        // const scaleFactor = 700 / img.width;\n        // const scaledHeight = img.height * scaleFactor;\n        // const scaleFactor = 700 / img.width;\n        const scaledHeight = img.height;\n\n        // Set canvas size\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(img, 0, 0, canvas.width, scaledHeight);\n        imgRef.current = img;\n        setImageLoaded(true); // Indicate that the image is now loaded\n      };\n      img.src = event.target.result;\n    };\n    reader.readAsDataURL(e.target.files[0]);\n  };\n  const handleUploadImage = async event => {\n    // const canvas = canvasRef.current;\n    // const imageData = canvas.toDataURL('image/jpeg'); // Convert canvas to base64 data URL\n    event.preventDefault();\n    const formData = new FormData();\n    formData.append('file', imageFile);\n    console.log('Image data:', formData);\n    for (let pair of formData.entries()) {\n      console.log(pair[0] + ': ' + pair[1]);\n    }\n\n    // You can now send the imageData to your backend using Axios or any other HTTP library\n    axios.post(`${baseURL}upload/`, formData).then(response => {\n      console.log('Image uploaded successfully:', response.data);\n\n      // const imageUrl = URL.createObjectURL(blob);\n\n      // Now you can use the imageUrl to display the image in your React component\n      // For example, you can set it as the src attribute of an <img> element\n      // document.getElementById('imageElement').src = imageUrl\n      // Optionally, handle success response\n    }).catch(error => {\n      console.error('Error uploading image:', error);\n      // Optionally, handle error\n    });\n  };\n\n  // const handleCoin = async (event) => {\n  //   event.preventDefault();\n  //   const rectangleData = {\n  //     x: coordinates[0].startX,\n  //     y: coordinates[0].startY,\n  //     width: coordinates[0].w,\n  //     height: coordinates[0].h\n  //   };\n  //   console.log('Rectangle data:', rectangleData);\n  //   axios.post(`${baseURL}uploadCoin/`, rectangleData)\n  //     .then(response => {\n  //       console.log('Image uploaded successfully:', response.data);\n  //       const blob = new Blob([response.data], { type: 'image/jpg' });\n  //       const canvas = canvasRef.current;\n  //         const ctx = canvas.getContext('2d');\n\n  //         // Use a fixed width for the canvas\n  //         // const scaleFactor = 700 / blob.width;\n  //         // const scaledHeight = blob.height * scaleFactor;\n\n  //         // Set canvas size\n  //         canvas.width = blob.width; \n  //         canvas.height = blob.height;\n\n  //         ctx.clearRect(0, 0, canvas.width, canvas.height);\n  //         ctx.drawImage(blob, 0, 0, canvas.width, blob.height);\n  //         imgRef.current = blob;\n  //         setImageLoaded(true); // Indicate that the image is now loaded\n  //     // Create a URL for the blob\n  //       // Optionally, handle success response\n  //     })\n  //     .catch(error => {\n  //       console.error('Error uploading image:', error);\n  //       // Optionally, handle error\n  //     });\n  // };\n\n  const handleRemoveImage = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    setImageLoaded(false);\n    setCoordinates([]);\n    setRect({});\n    setDrag(false);\n    if (imageLoaderRef.current) {\n      imageLoaderRef.current.value = null;\n    }\n  };\n  const initDraw = event => {\n    if (!imageLoaded) return;\n    console.log(event);\n    console.log(event.nativeEvent);\n    const scaleX = imgRef.current.width / originalCanvasSize[0];\n    const scaleY = imgRef.current.height / originalCanvasSize[1];\n    console.log(originalCanvasSize, [imgRef.current.width, imgRef.current.height], [scaleX, scaleY]);\n    // const x = 3.42 * event.nativeEvent.offsetX;\n    // const y = 3.42 * event.nativeEvent.offsetY;\n    const x = scaleX * 0.5 * event.nativeEvent.offsetX;\n    const y = scaleY * 0.5 * event.nativeEvent.offsetY;\n    // const x = 2 * event.nativeEvent.screenX;\n    // const y = 2 * event.nativeEvent.screenY;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (mode === \"draw\") {\n      setRect({\n        startX: x,\n        startY: y,\n        w: 0,\n        h: 0\n      });\n      setDrag(true);\n    } else if (mode === \"point\") {\n      ctx.fillStyle = 'red';\n      ctx.beginPath();\n      ctx.arc(x, y, 5, 0, Math.PI * 2, true); // Draw a circle\n      ctx.fill();\n      setCoordinates([...coordinates, {\n        startX: x,\n        startY: y,\n        w: 0,\n        h: 0\n      }]);\n    }\n  };\n  const draw = event => {\n    // console.log(imgRef.current.width, imgRef.current.height);\n    // console.log(canvasRef.current.width, canvasRef.current.height);\n    if (!imageLoaded || !drag || mode !== \"draw\") return;\n    // const mouseX = 3.42 * event.nativeEvent.offsetX;\n    // const mouseY = 3.42 * event.nativeEvent.offsetY;\n    const scaleX = imgRef.current.width / originalCanvasSize[0];\n    const scaleY = imgRef.current.height / originalCanvasSize[1];\n    console.log(originalCanvasSize, [imgRef.current.width, imgRef.current.height], [scaleX, scaleY]);\n    const mouseX = scaleX * 0.5 * event.nativeEvent.offsetX;\n    const mouseY = scaleY * 0.5 * event.nativeEvent.offsetY;\n    // const mouseX = 2 * event.nativeEvent.screenX;\n    // const mouseY = 2 * event.nativeEvent.screenY;\n    const width = mouseX - rect.startX;\n    const height = mouseY - rect.startY;\n    setRect({\n      ...rect,\n      w: width,\n      h: height\n    });\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n    ctx.strokeStyle = 'red';\n    ctx.strokeRect(rect.startX, rect.startY, width, height);\n    redraw(ctx); // Redraw the rectangles after drawing the current rectangle\n  };\n  const finishDraw = () => {\n    if (!imageLoaded || mode === \"point\") return; // Skip if in point mode\n    setDrag(false);\n    setCoordinates([...coordinates, rect]);\n  };\n  const redraw = ctx => {\n    coordinates.forEach(coord => {\n      if (coord.w === 0 && coord.h === 0) {\n        ctx.fillStyle = 'red';\n        ctx.beginPath();\n        ctx.arc(coord.startX, coord.startY, 5, 0, 2 * Math.PI);\n        ctx.fill();\n      } else {\n        ctx.strokeStyle = 'red';\n        ctx.strokeRect(coord.startX, coord.startY, coord.w, coord.h);\n      }\n    });\n  };\n  const undoLastAction = () => {\n    setCoordinates(prevCoordinates => {\n      const newCoordinates = prevCoordinates.slice(0, -1);\n\n      // Redraw the canvas\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n\n      // Redraw all the elements except the last one\n      newCoordinates.forEach(coord => {\n        if (coord.w === 0 && coord.h === 0) {\n          ctx.fillStyle = 'red';\n          ctx.beginPath();\n          ctx.arc(coord.startX, coord.startY, 5, 0, Math.PI * 2);\n          ctx.fill();\n        } else {\n          ctx.strokeStyle = 'red';\n          ctx.strokeRect(coord.startX, coord.startY, coord.w, coord.h);\n        }\n      });\n      return newCoordinates;\n    });\n  };\n  const toggleMode = () => {\n    setMode(prevMode => prevMode === \"draw\" ? \"point\" : \"draw\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"keloid-detector-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Mode: \", mode === \"draw\" ? \"Drawing Rectangles\" : \"Selecting Points\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      ref: imageLoaderRef,\n      onChange: handleImage,\n      className: \"file-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onMouseDown: initDraw,\n      onMouseMove: draw,\n      onMouseUp: finishDraw,\n      className: \"image-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUploadImage,\n          className: \"remove-image-btn\",\n          children: \"Upload Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRemoveImage,\n          className: \"remove-image-btn\",\n          children: \"Remove Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"print-coordinates-btn\",\n          onClick: () => alert(JSON.stringify(coordinates)),\n          children: \"Print Coord\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"undo-rectangle-btn\",\n          onClick: undoLastAction,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleMode,\n          className: \"toggle-mode-btn\",\n          children: mode === \"draw\" ? \"Point Mode\" : \"Draw Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUploadImage,\n          className: \"remove-image-btn\",\n          children: \"Confrim Lesion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUploadImage,\n          className: \"remove-image-btn\",\n          children: \"Print Patch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coordinates-display\",\n      children: [\"Coordinates: \", coordinates.map((coord, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coordinate-item\",\n        children: [\"Start (\", coord.startX, \", \", coord.startY, \"), End (\", coord.startX + coord.w, \", \", coord.startY + coord.h, \")\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageUploader, \"/7BmuUrTP0Iy5C86UqB3iQssnAs=\");\n_c = ImageUploader;\nexport default ImageUploader;\nvar _c;\n$RefreshReg$(_c, \"ImageUploader\");","map":{"version":3,"names":["React","useRef","useState","axios","jsxDEV","_jsxDEV","baseURL","ImageUploader","_s","imageLoaded","setImageLoaded","coordinates","setCoordinates","imageFile","setImageFile","canvasRef","imageLoaderRef","imgRef","rect","setRect","drag","setDrag","mode","setMode","originalCanvasSize","setOriginalCanvasSize","handleImage","e","reader","FileReader","target","files","onload","event","img","Image","canvas","current","width","height","ctx","getContext","console","log","scaledHeight","clearRect","drawImage","src","result","readAsDataURL","handleUploadImage","preventDefault","formData","FormData","append","pair","entries","post","then","response","data","catch","error","handleRemoveImage","value","initDraw","nativeEvent","scaleX","scaleY","x","offsetX","y","offsetY","startX","startY","w","h","fillStyle","beginPath","arc","Math","PI","fill","draw","mouseX","mouseY","strokeStyle","strokeRect","redraw","finishDraw","forEach","coord","undoLastAction","prevCoordinates","newCoordinates","slice","toggleMode","prevMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","onChange","onMouseDown","onMouseMove","onMouseUp","onClick","alert","JSON","stringify","map","index","_c","$RefreshReg$"],"sources":["/Users/reed/keloid/CS-497-keloid/src/ImageUploader.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport './ImageUploader.css';\nimport axios from 'axios';\n\nconst baseURL = \"https://acbb-35-237-172-233.ngrok-free.app/\";\n\nfunction ImageUploader() {\n  const [imageLoaded, setImageLoaded] = useState(false); // New state to track if image is loaded\n  const [coordinates, setCoordinates] = useState([]);\n  const [imageFile, setImageFile] = useState(null); // New state to store the image file\n  const canvasRef = useRef(null);\n  const imageLoaderRef = useRef(null);\n  const imgRef = useRef(null); // Ref to store the loaded image element\n  const [rect, setRect] = useState({});\n  const [drag, setDrag] = useState(false);\n  const [mode, setMode] = useState(\"draw\"); // Default mode is \"draw\"\n  const [originalCanvasSize, setOriginalCanvasSize] = useState([0, 0]);\n\n  const handleImage = (e) => {\n    const reader = new FileReader();\n    setImageFile(e.target.files[0]); // Store the image file in state\n    reader.onload = (event) => {\n      const img = new Image();\n      img.onload = () => {\n        const canvas = canvasRef.current;\n        setOriginalCanvasSize([canvas.width, canvas.height]);\n        const ctx = canvas.getContext('2d');\n        console.log('Image loaded:', img.width, img.height);\n        // Use a fixed width for the canvas\n        // const scaleFactor = 700 / img.width;\n        // const scaledHeight = img.height * scaleFactor;\n        // const scaleFactor = 700 / img.width;\n        const scaledHeight = img.height;\n        \n        // Set canvas size\n        canvas.width = img.width; \n        canvas.height = img.height;\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(img, 0, 0, canvas.width, scaledHeight);\n        imgRef.current = img;\n        setImageLoaded(true); // Indicate that the image is now loaded\n      };\n      img.src = event.target.result;\n    };\n    \n    reader.readAsDataURL(e.target.files[0]);\n  };\n\n  const handleUploadImage = async (event) => {\n    // const canvas = canvasRef.current;\n  // const imageData = canvas.toDataURL('image/jpeg'); // Convert canvas to base64 data URL\n  event.preventDefault();\n  const formData = new FormData();\n  formData.append('file', imageFile);\n  console.log('Image data:', formData);\n  for (let pair of formData.entries()) {\n    console.log(pair[0] + ': ' + pair[1]);\n  }\n\n  // You can now send the imageData to your backend using Axios or any other HTTP library\n  axios.post(`${baseURL}upload/`, formData )\n    .then(response => {\n      console.log('Image uploaded successfully:', response.data);\n      \n      // const imageUrl = URL.createObjectURL(blob);\n      \n      // Now you can use the imageUrl to display the image in your React component\n      // For example, you can set it as the src attribute of an <img> element\n      // document.getElementById('imageElement').src = imageUrl\n      // Optionally, handle success response\n    })\n    .catch(error => {\n      console.error('Error uploading image:', error);\n      // Optionally, handle error\n    });\n};\n\n// const handleCoin = async (event) => {\n//   event.preventDefault();\n//   const rectangleData = {\n//     x: coordinates[0].startX,\n//     y: coordinates[0].startY,\n//     width: coordinates[0].w,\n//     height: coordinates[0].h\n//   };\n//   console.log('Rectangle data:', rectangleData);\n//   axios.post(`${baseURL}uploadCoin/`, rectangleData)\n//     .then(response => {\n//       console.log('Image uploaded successfully:', response.data);\n//       const blob = new Blob([response.data], { type: 'image/jpg' });\n//       const canvas = canvasRef.current;\n//         const ctx = canvas.getContext('2d');\n        \n//         // Use a fixed width for the canvas\n//         // const scaleFactor = 700 / blob.width;\n//         // const scaledHeight = blob.height * scaleFactor;\n        \n//         // Set canvas size\n//         canvas.width = blob.width; \n//         canvas.height = blob.height;\n\n//         ctx.clearRect(0, 0, canvas.width, canvas.height);\n//         ctx.drawImage(blob, 0, 0, canvas.width, blob.height);\n//         imgRef.current = blob;\n//         setImageLoaded(true); // Indicate that the image is now loaded\n//     // Create a URL for the blob\n//       // Optionally, handle success response\n//     })\n//     .catch(error => {\n//       console.error('Error uploading image:', error);\n//       // Optionally, handle error\n//     });\n// };\n\n  const handleRemoveImage = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    setImageLoaded(false);\n    setCoordinates([]);\n    setRect({});\n    setDrag(false);\n    \n    if (imageLoaderRef.current) {\n      imageLoaderRef.current.value = null;\n    }\n  }\n\n  const initDraw = (event) => {\n    if (!imageLoaded) return; \n    console.log(event);\n    console.log(event.nativeEvent);\n    const scaleX = imgRef.current.width / originalCanvasSize[0];\n    const scaleY = imgRef.current.height / originalCanvasSize[1];\n    console.log(originalCanvasSize, [imgRef.current.width, imgRef.current.height], [scaleX, scaleY]);\n    // const x = 3.42 * event.nativeEvent.offsetX;\n    // const y = 3.42 * event.nativeEvent.offsetY;\n    const x = scaleX * 0.5 * event.nativeEvent.offsetX;\n    const y = scaleY * 0.5 * event.nativeEvent.offsetY;\n    // const x = 2 * event.nativeEvent.screenX;\n    // const y = 2 * event.nativeEvent.screenY;\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n\n\n    if (mode === \"draw\") {\n      setRect({ startX: x, startY: y, w: 0, h: 0 });\n      setDrag(true);\n    } else if (mode === \"point\") {\n      ctx.fillStyle = 'red';\n      ctx.beginPath();\n      ctx.arc(x, y, 5, 0, Math.PI * 2, true); // Draw a circle\n      ctx.fill();\n\n      setCoordinates([...coordinates, { startX: x, startY: y, w: 0, h: 0 }]);\n    }\n  };\n\n  const draw = (event) => {\n    // console.log(imgRef.current.width, imgRef.current.height);\n    // console.log(canvasRef.current.width, canvasRef.current.height);\n    if (!imageLoaded || !drag || mode !== \"draw\") return;\n    // const mouseX = 3.42 * event.nativeEvent.offsetX;\n    // const mouseY = 3.42 * event.nativeEvent.offsetY;\n    const scaleX = imgRef.current.width / originalCanvasSize[0];\n    const scaleY = imgRef.current.height / originalCanvasSize[1];\n    console.log(originalCanvasSize, [imgRef.current.width, imgRef.current.height], [scaleX, scaleY]);\n    const mouseX = scaleX * 0.5 * event.nativeEvent.offsetX;\n    const mouseY = scaleY * 0.5 * event.nativeEvent.offsetY;\n    // const mouseX = 2 * event.nativeEvent.screenX;\n    // const mouseY = 2 * event.nativeEvent.screenY;\n    const width = mouseX - rect.startX;\n    const height = mouseY - rect.startY;\n    setRect({ ...rect, w: width, h: height });\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n    ctx.strokeStyle = 'red';\n    ctx.strokeRect(rect.startX, rect.startY, width, height);\n    redraw(ctx); // Redraw the rectangles after drawing the current rectangle\n\n  };\n\n  const finishDraw = () => {\n    if (!imageLoaded || mode === \"point\") return; // Skip if in point mode\n    setDrag(false);\n    setCoordinates([...coordinates, rect]);\n  };\n\n  const redraw= (ctx) => {\n    coordinates.forEach(coord => {\n      if (coord.w === 0 && coord.h === 0) {\n        ctx.fillStyle = 'red';\n        ctx.beginPath();\n        ctx.arc(coord.startX, coord.startY, 5, 0, 2 * Math.PI);\n        ctx.fill();\n      } else {\n        ctx.strokeStyle = 'red';\n        ctx.strokeRect(coord.startX, coord.startY, coord.w, coord.h);\n      }\n  });\n};\n\n  const undoLastAction = () => {\n    setCoordinates(prevCoordinates => {\n      const newCoordinates = prevCoordinates.slice(0, -1);\n  \n      // Redraw the canvas\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n      \n      // Redraw all the elements except the last one\n      newCoordinates.forEach(coord => {\n        if (coord.w === 0 && coord.h === 0) {\n          ctx.fillStyle = 'red';\n          ctx.beginPath();\n          ctx.arc(coord.startX, coord.startY, 5, 0, Math.PI * 2);\n          ctx.fill();\n        } else {\n          ctx.strokeStyle = 'red';\n          ctx.strokeRect(coord.startX, coord.startY, coord.w, coord.h);\n        }\n      });\n  \n      return newCoordinates;\n    });\n    \n  };\n\n  const toggleMode = () => {\n    setMode(prevMode => prevMode === \"draw\" ? \"point\" : \"draw\");\n  };\n  \n\n  return (\n    <div className=\"keloid-detector-container\">\n      <h3>Mode: {mode === \"draw\" ? \"Drawing Rectangles\" : \"Selecting Points\"}</h3>\n\n      <input type=\"file\" ref={imageLoaderRef} onChange={handleImage} className=\"file-input\" />\n      <canvas ref={canvasRef} onMouseDown={initDraw} onMouseMove={draw} onMouseUp={finishDraw} className=\"image-canvas\"></canvas>\n      <div className=\"button-grid\">\n      <div className=\"column\">\n        <button onClick={handleUploadImage} className=\"remove-image-btn\">Upload Image</button>\n        {/* <button onClick={handleCoin} className=\"remove-image-btn\">Confirm Coin</button> */}\n        <button onClick={handleRemoveImage} className=\"remove-image-btn\">Remove Image</button>\n        <button className=\"print-coordinates-btn\" onClick={() => alert(JSON.stringify(coordinates))}>Print Coord</button>\n      </div>\n      <div className=\"column\">\n        <button className=\"undo-rectangle-btn\" onClick={undoLastAction}>Undo</button>\n        <button onClick={toggleMode} className=\"toggle-mode-btn\">\n          {mode === \"draw\" ? \"Point Mode\" : \"Draw Mode\"}\n        </button>\n        <button onClick={handleUploadImage} className=\"remove-image-btn\">Confrim Lesion</button>\n        <button onClick={handleUploadImage} className=\"remove-image-btn\">Print Patch</button>\n        </div>\n        </div>\n        <div className=\"coordinates-display\">Coordinates: {coordinates.map((coord, index) => (\n          <div key={index} className=\"coordinate-item\">\n            Start ({coord.startX}, {coord.startY}), End ({coord.startX + coord.w}, {coord.startY + coord.h})\n          </div>\n      ))}</div>\n    </div>\n  );\n}\n\nexport default ImageUploader;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}