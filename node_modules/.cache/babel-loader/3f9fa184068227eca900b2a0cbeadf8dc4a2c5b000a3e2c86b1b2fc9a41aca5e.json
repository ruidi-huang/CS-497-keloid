{"ast":null,"code":"var _jsxFileName = \"/Users/reed/keloid/CS-497-keloid/src/ImageUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport './ImageUploader.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageUploader() {\n  _s();\n  const [imageLoaded, setImageLoaded] = useState(false); // New state to track if image is loaded\n  const [coordinates, setCoordinates] = useState([]);\n  const canvasRef = useRef(null);\n  const imageLoaderRef = useRef(null);\n  const imgRef = useRef(null); // Ref to store the loaded image element\n  const [rect, setRect] = useState({});\n  const [drag, setDrag] = useState(false);\n  const [mode, setMode] = useState(\"draw\"); // Default mode is \"draw\"\n\n  const handleImage = e => {\n    const reader = new FileReader();\n    reader.onload = event => {\n      const img = new Image();\n      img.onload = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n\n        // Use a fixed width for the canvas\n        const scaleFactor = 700 / img.width;\n        const scaledHeight = img.height * scaleFactor;\n\n        // Set canvas size\n        canvas.width = 700;\n        canvas.height = scaledHeight;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(img, 0, 0, canvas.width, scaledHeight);\n        imgRef.current = img;\n        setImageLoaded(true); // Indicate that the image is now loaded\n      };\n      img.src = event.target.result;\n    };\n    reader.readAsDataURL(e.target.files[0]);\n  };\n  const handleRemoveImage = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    setImageLoaded(false);\n    setCoordinates([]);\n    setRect({});\n    setDrag(false);\n    if (imageLoaderRef.current) {\n      imageLoaderRef.current.value = null;\n    }\n  };\n  const initDraw = event => {\n    if (!imageLoaded) return;\n    const x = event.nativeEvent.offsetX;\n    const y = event.nativeEvent.offsetY;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (mode === \"draw\") {\n      setRect({\n        startX: x,\n        startY: y,\n        w: 0,\n        h: 0\n      });\n      setDrag(true);\n    } else if (mode === \"point\") {\n      ctx.fillStyle = 'red';\n      ctx.beginPath();\n      ctx.arc(x, y, 5, 0, Math.PI * 2, true); // Draw a circle\n      ctx.fill();\n      setCoordinates([...coordinates, {\n        startX: x,\n        startY: y,\n        w: 0,\n        h: 0\n      }]);\n    }\n  };\n  const draw = event => {\n    if (!imageLoaded || !drag || mode !== \"draw\") return;\n    const mouseX = event.nativeEvent.offsetX;\n    const mouseY = event.nativeEvent.offsetY;\n    const width = mouseX - rect.startX;\n    const height = mouseY - rect.startY;\n    setRect({\n      ...rect,\n      w: width,\n      h: height\n    });\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n    ctx.strokeStyle = 'red';\n    ctx.strokeRect(rect.startX, rect.startY, width, height);\n    redraw(ctx); // Redraw the rectangles after drawing the current rectangle\n  };\n  const finishDraw = () => {\n    if (!imageLoaded || mode === \"point\") return; // Skip if in point mode\n    setDrag(false);\n    setCoordinates([...coordinates, rect]);\n  };\n  const redraw = ctx => {\n    coordinates.forEach(coord => {\n      if (coord.w === 0 && coord.h === 0) {\n        ctx.fillStyle = 'red';\n        ctx.beginPath();\n        ctx.arc(coord.startX, coord.startY, 5, 0, 2 * Math.PI);\n        ctx.fill();\n      } else {\n        ctx.strokeStyle = 'red';\n        ctx.strokeRect(coord.startX, coord.startY, coord.w, coord.h);\n      }\n    });\n  };\n  const undoLastAction = () => {\n    setCoordinates(prevCoordinates => {\n      const newCoordinates = prevCoordinates.slice(0, -1);\n\n      // Redraw the canvas\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n\n      // Redraw all the elements except the last one\n      newCoordinates.forEach(coord => {\n        if (coord.w === 0 && coord.h === 0) {\n          ctx.fillStyle = 'red';\n          ctx.beginPath();\n          ctx.arc(coord.startX, coord.startY, 5, 0, Math.PI * 2);\n          ctx.fill();\n        } else {\n          ctx.strokeStyle = 'red';\n          ctx.strokeRect(coord.startX, coord.startY, coord.w, coord.h);\n        }\n      });\n      return newCoordinates;\n    });\n  };\n  const toggleMode = () => {\n    setMode(prevMode => prevMode === \"draw\" ? \"point\" : \"draw\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"keloid-detector-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Mode: \", mode === \"draw\" ? \"Drawing Rectangles\" : \"Selecting Points\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      ref: imageLoaderRef,\n      onChange: handleImage,\n      className: \"file-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onMouseDown: initDraw,\n      onMouseMove: draw,\n      onMouseUp: finishDraw,\n      className: \"image-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRemoveImage,\n      className: \"remove-image-btn\",\n      children: \"Remove Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"print-coordinates-btn\",\n      onClick: () => alert(JSON.stringify(coordinates)),\n      children: \"Print Coordinates\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"undo-rectangle-btn\",\n      onClick: undoLastAction,\n      children: \"Undo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleMode,\n      className: \"toggle-mode-btn\",\n      children: mode === \"draw\" ? \"Switch to Point Mode\" : \"Switch to Draw Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coordinates-display\",\n      children: [\"Coordinates: \", coordinates.map((coord, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coordinate-item\",\n        children: [\"Start (\", coord.startX, \", \", coord.startY, \"), End (\", coord.startX + coord.w, \", \", coord.startY + coord.h, \")\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageUploader, \"mhqrL7Ug3nHDyzaJ8mGIyghY3kU=\");\n_c = ImageUploader;\nexport default ImageUploader;\nvar _c;\n$RefreshReg$(_c, \"ImageUploader\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","ImageUploader","_s","imageLoaded","setImageLoaded","coordinates","setCoordinates","canvasRef","imageLoaderRef","imgRef","rect","setRect","drag","setDrag","mode","setMode","handleImage","e","reader","FileReader","onload","event","img","Image","canvas","current","ctx","getContext","scaleFactor","width","scaledHeight","height","clearRect","drawImage","src","target","result","readAsDataURL","files","handleRemoveImage","value","initDraw","x","nativeEvent","offsetX","y","offsetY","startX","startY","w","h","fillStyle","beginPath","arc","Math","PI","fill","draw","mouseX","mouseY","strokeStyle","strokeRect","redraw","finishDraw","forEach","coord","undoLastAction","prevCoordinates","newCoordinates","slice","toggleMode","prevMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","onChange","onMouseDown","onMouseMove","onMouseUp","onClick","alert","JSON","stringify","map","index","_c","$RefreshReg$"],"sources":["/Users/reed/keloid/CS-497-keloid/src/ImageUploader.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport './ImageUploader.css';\n\nfunction ImageUploader() {\n  const [imageLoaded, setImageLoaded] = useState(false); // New state to track if image is loaded\n  const [coordinates, setCoordinates] = useState([]);\n  const canvasRef = useRef(null);\n  const imageLoaderRef = useRef(null);\n  const imgRef = useRef(null); // Ref to store the loaded image element\n  const [rect, setRect] = useState({});\n  const [drag, setDrag] = useState(false);\n  const [mode, setMode] = useState(\"draw\"); // Default mode is \"draw\"\n\n  const handleImage = (e) => {\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      const img = new Image();\n      img.onload = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        \n        // Use a fixed width for the canvas\n        const scaleFactor = 700 / img.width;\n        const scaledHeight = img.height * scaleFactor;\n        \n        // Set canvas size\n        canvas.width = 700; \n        canvas.height = scaledHeight;\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(img, 0, 0, canvas.width, scaledHeight);\n        imgRef.current = img;\n        setImageLoaded(true); // Indicate that the image is now loaded\n      };\n      img.src = event.target.result;\n    };\n    reader.readAsDataURL(e.target.files[0]);\n  };\n\n  const handleRemoveImage = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    setImageLoaded(false);\n    setCoordinates([]);\n    setRect({});\n    setDrag(false);\n    \n    if (imageLoaderRef.current) {\n      imageLoaderRef.current.value = null;\n    }\n  }\n\n  const initDraw = (event) => {\n    if (!imageLoaded) return; \n    const x = event.nativeEvent.offsetX;\n    const y = event.nativeEvent.offsetY;\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n\n\n    if (mode === \"draw\") {\n      setRect({ startX: x, startY: y, w: 0, h: 0 });\n      setDrag(true);\n    } else if (mode === \"point\") {\n      ctx.fillStyle = 'red';\n      ctx.beginPath();\n      ctx.arc(x, y, 5, 0, Math.PI * 2, true); // Draw a circle\n      ctx.fill();\n\n      setCoordinates([...coordinates, { startX: x, startY: y, w: 0, h: 0 }]);\n    }\n  };\n\n  const draw = (event) => {\n    if (!imageLoaded || !drag || mode !== \"draw\") return;\n    const mouseX = event.nativeEvent.offsetX;\n    const mouseY = event.nativeEvent.offsetY;\n    const width = mouseX - rect.startX;\n    const height = mouseY - rect.startY;\n    setRect({ ...rect, w: width, h: height });\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n    ctx.strokeStyle = 'red';\n    ctx.strokeRect(rect.startX, rect.startY, width, height);\n    redraw(ctx); // Redraw the rectangles after drawing the current rectangle\n\n  };\n\n  const finishDraw = () => {\n    if (!imageLoaded || mode === \"point\") return; // Skip if in point mode\n    setDrag(false);\n    setCoordinates([...coordinates, rect]);\n  };\n\n  const redraw= (ctx) => {\n    coordinates.forEach(coord => {\n      if (coord.w === 0 && coord.h === 0) {\n        ctx.fillStyle = 'red';\n        ctx.beginPath();\n        ctx.arc(coord.startX, coord.startY, 5, 0, 2 * Math.PI);\n        ctx.fill();\n      } else {\n        ctx.strokeStyle = 'red';\n        ctx.strokeRect(coord.startX, coord.startY, coord.w, coord.h);\n      }\n  });\n};\n\n  const undoLastAction = () => {\n    setCoordinates(prevCoordinates => {\n      const newCoordinates = prevCoordinates.slice(0, -1);\n  \n      // Redraw the canvas\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n      \n      // Redraw all the elements except the last one\n      newCoordinates.forEach(coord => {\n        if (coord.w === 0 && coord.h === 0) {\n          ctx.fillStyle = 'red';\n          ctx.beginPath();\n          ctx.arc(coord.startX, coord.startY, 5, 0, Math.PI * 2);\n          ctx.fill();\n        } else {\n          ctx.strokeStyle = 'red';\n          ctx.strokeRect(coord.startX, coord.startY, coord.w, coord.h);\n        }\n      });\n  \n      return newCoordinates;\n    });\n    \n  };\n\n  const toggleMode = () => {\n    setMode(prevMode => prevMode === \"draw\" ? \"point\" : \"draw\");\n  };\n  \n\n  return (\n    <div className=\"keloid-detector-container\">\n      <h3>Mode: {mode === \"draw\" ? \"Drawing Rectangles\" : \"Selecting Points\"}</h3>\n\n      <input type=\"file\" ref={imageLoaderRef} onChange={handleImage} className=\"file-input\" />\n      <canvas ref={canvasRef} onMouseDown={initDraw} onMouseMove={draw} onMouseUp={finishDraw} className=\"image-canvas\"></canvas>\n      <button onClick={handleRemoveImage} className=\"remove-image-btn\">Remove Image</button>\n      <button className=\"print-coordinates-btn\" onClick={() => alert(JSON.stringify(coordinates))}>Print Coordinates</button>\n      <button className=\"undo-rectangle-btn\" onClick={undoLastAction}>Undo</button>\n      <button onClick={toggleMode} className=\"toggle-mode-btn\">\n  {mode === \"draw\" ? \"Switch to Point Mode\" : \"Switch to Draw Mode\"}\n</button>\n      <div className=\"coordinates-display\">Coordinates: {coordinates.map((coord, index) => (\n        <div key={index} className=\"coordinate-item\">\n          Start ({coord.startX}, {coord.startY}), End ({coord.startX + coord.w}, {coord.startY + coord.h})\n        </div>\n      ))}</div>\n    </div>\n  );\n}\n\nexport default ImageUploader;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}