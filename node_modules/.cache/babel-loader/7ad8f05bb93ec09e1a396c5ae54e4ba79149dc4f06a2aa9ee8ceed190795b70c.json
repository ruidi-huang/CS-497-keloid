{"ast":null,"code":"var _jsxFileName = \"/Users/reed/keloid/CS-497-keloid/src/ImageUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport './ImageUploader.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = \"https://c96b-35-237-123-73.ngrok-free.app/\";\nfunction ImageUploader() {\n  _s();\n  const [imageLoaded, setImageLoaded] = useState(false); // New state to track if image is loaded\n  const [coordinates, setCoordinates] = useState([]);\n  const [imageFile, setImageFile] = useState(null); // New state to store the image file\n  const canvasRef = useRef(null);\n  const imageLoaderRef = useRef(null);\n  const imgRef = useRef(null); // Ref to store the loaded image element\n  const [rect, setRect] = useState({});\n  const [drag, setDrag] = useState(false);\n  const [mode, setMode] = useState(\"draw\"); // Default mode is \"draw\"\n  const [globalScaleFactor, setGlobalScaleFactor] = useState(1);\n  const [pixelPerMetric, setPixelPerMetric] = useState(false);\n  // const [originalCanvasSize, setOriginalCanvasSize] = useState([0, 0]);\n\n  const handleImage = e => {\n    const reader = new FileReader();\n    setImageFile(e.target.files[0]); // Store the image file in state\n    reader.onload = event => {\n      const img = new Image();\n      img.onload = () => {\n        const canvas = canvasRef.current;\n        // setOriginalCanvasSize([canvas.width, canvas.height]);\n        const ctx = canvas.getContext('2d');\n        // ctx.clearRect(0, 0, canvas.width, canvas.height);\n        // console.log('Image loaded:', img.width, img.height);\n        // Use a fixed width for the canvas\n        const scaleFactor = 700 / img.width;\n        setGlobalScaleFactor(scaleFactor);\n        const scaledHeight = img.height * scaleFactor;\n        // const scaleFactor = 700 / img.width;\n        // const scaledHeight = img.height;\n\n        // Set canvas size\n        canvas.width = 700;\n        canvas.height = scaledHeight;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(img, 0, 0, canvas.width, scaledHeight);\n        imgRef.current = img;\n        setImageLoaded(true); // Indicate that the image is now loaded\n      };\n      img.src = event.target.result;\n    };\n    reader.readAsDataURL(e.target.files[0]);\n  };\n  const handleUploadImage = async event => {\n    // const canvas = canvasRef.current;\n    // const imageData = canvas.toDataURL('image/jpeg'); // Convert canvas to base64 data URL\n    event.preventDefault();\n    const formData = new FormData();\n    formData.append('file', imageFile);\n    console.log('Image data:', formData);\n    for (let pair of formData.entries()) {\n      console.log(pair[0] + ': ' + pair[1]);\n    }\n\n    // You can now send the imageData to your backend using Axios or any other HTTP library\n    axios.post(`${baseURL}upload/`, formData).then(response => {\n      console.log('Image uploaded successfully:', response.data);\n\n      // const imageUrl = URL.createObjectURL(blob);\n\n      // Now you can use the imageUrl to display the image in your React component\n      // For example, you can set it as the src attribute of an <img> element\n      // document.getElementById('imageElement').src = imageUrl\n      // Optionally, handle success response\n    }).catch(error => {\n      console.error('Error uploading image:', error);\n      // Optionally, handle error\n    });\n  };\n  const handleCoin = async event => {\n    event.preventDefault();\n    const RectangleData = {\n      x: coordinates[0].startX / globalScaleFactor,\n      y: coordinates[0].startY / globalScaleFactor,\n      width: coordinates[0].w / globalScaleFactor,\n      height: coordinates[0].h / globalScaleFactor\n    };\n    console.log('Rectangle data:', RectangleData);\n    axios.post(`${baseURL}uploadCoin/`, RectangleData, {\n      responseType: 'arraybuffer'\n    }).then(response => {\n      console.log('Image uploaded successfully:', response.data);\n      // const { img, pixelsPerMetric: ppm } = response.data;\n      // console.log('Image:', img);\n      // console.log('Pixels per metric:', ppm);\n      const base64Image = arrayBufferToBase64(response.data);\n      setPixelPerMetric(true);\n      const image = new Image();\n\n      // Set the src of the image to the data received from the backend\n      image.src = `data:image/jpeg;base64,${base64Image}`;\n      image.onload = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n        // Convert BGR to RGB\n        for (let i = 0; i < imageData.data.length; i += 4) {\n          const temp = imageData.data[i];\n          imageData.data[i] = imageData.data[i + 2];\n          imageData.data[i + 2] = temp;\n        }\n        ctx.putImageData(imageData, 0, 0);\n        imgRef.current = image;\n        setImageLoaded(true); // Indicate that the image is now loaded\n      };\n\n      // const blob = new Blob([response.data], { type: 'image/jpeg' });\n      // const canvas = canvasRef.current;\n      // const ctx = canvas.getContext('2d');\n      // \n      // Use a fixed width for the canvas\n      // const scaleFactor = 700 / blob.width;\n      // const scaledHeight = blob.height * scaleFactor;\n\n      // Set canvas size\n      // canvas.width = blob.width * globalScaleFactor; \n      // canvas.height = blob.height * globalScaleFactor;\n\n      // ctx.clearRect(0, 0, canvas.width, canvas.height);\n      // ctx.drawImage(blob, 0, 0, canvas.width, canvas.height);\n      // imgRef.current = blob;\n      // setImageLoaded(true); // Indicate that the image is now loaded\n      // Create a URL for the blob\n      // Optionally, handle success response\n    }).catch(error => {\n      console.error('Error uploading image:', error);\n      // Optionally, handle error\n    });\n    const arrayBufferToBase64 = buffer => {\n      let binary = '';\n      const bytes = new Uint8Array(buffer);\n      for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return btoa(binary);\n    };\n  };\n  const handleRemoveImage = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    setImageLoaded(false);\n    setCoordinates([]);\n    setRect({});\n    setDrag(false);\n    if (imageLoaderRef.current) {\n      imageLoaderRef.current.value = null;\n    }\n  };\n  const initDraw = event => {\n    if (!imageLoaded) return;\n    // console.log(event);\n    // console.log(event.nativeEvent);\n    const x = event.nativeEvent.offsetX;\n    const y = event.nativeEvent.offsetY;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (mode === \"draw\") {\n      setRect({\n        startX: x,\n        startY: y,\n        w: 0,\n        h: 0\n      });\n      setDrag(true);\n    } else if (mode === \"point\") {\n      ctx.fillStyle = 'red';\n      ctx.beginPath();\n      ctx.arc(x, y, 5, 0, Math.PI * 2, true); // Draw a circle\n      ctx.fill();\n      setCoordinates([...coordinates, {\n        startX: x,\n        startY: y,\n        w: 0,\n        h: 0\n      }]);\n    }\n  };\n  const draw = event => {\n    if (!imageLoaded || !drag || mode !== \"draw\") return;\n    const mouseX = event.nativeEvent.offsetX;\n    const mouseY = event.nativeEvent.offsetY;\n    const width = mouseX - rect.startX;\n    const height = mouseY - rect.startY;\n    setRect({\n      ...rect,\n      w: width,\n      h: height\n    });\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n    ctx.strokeStyle = 'red';\n    ctx.strokeRect(rect.startX, rect.startY, width, height);\n    redraw(ctx); // Redraw the rectangles after drawing the current rectangle\n  };\n  const finishDraw = () => {\n    if (!imageLoaded || mode === \"point\") return; // Skip if in point mode\n    setDrag(false);\n    setCoordinates([...coordinates, rect]);\n  };\n  const redraw = ctx => {\n    coordinates.forEach(coord => {\n      if (coord.w === 0 && coord.h === 0) {\n        ctx.fillStyle = 'red';\n        ctx.beginPath();\n        ctx.arc(coord.startX, coord.startY, 5, 0, 2 * Math.PI);\n        ctx.fill();\n      } else {\n        ctx.strokeStyle = 'red';\n        ctx.strokeRect(coord.startX, coord.startY, coord.w, coord.h);\n      }\n    });\n  };\n  const undoLastAction = () => {\n    setCoordinates(prevCoordinates => {\n      const newCoordinates = prevCoordinates.slice(0, -1);\n\n      // Redraw the canvas\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n\n      // Redraw all the elements except the last one\n      newCoordinates.forEach(coord => {\n        if (coord.w === 0 && coord.h === 0) {\n          ctx.fillStyle = 'red';\n          ctx.beginPath();\n          ctx.arc(coord.startX, coord.startY, 5, 0, Math.PI * 2);\n          ctx.fill();\n        } else {\n          ctx.strokeStyle = 'red';\n          ctx.strokeRect(coord.startX, coord.startY, coord.w, coord.h);\n        }\n      });\n      return newCoordinates;\n    });\n  };\n  const toggleMode = () => {\n    setMode(prevMode => prevMode === \"draw\" ? \"point\" : \"draw\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"keloid-detector-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Mode: \", mode === \"draw\" ? \"Drawing Rectangles\" : \"Selecting Points\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      ref: imageLoaderRef,\n      onChange: handleImage,\n      className: \"file-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onMouseDown: initDraw,\n      onMouseMove: draw,\n      onMouseUp: finishDraw,\n      className: \"image-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUploadImage,\n          className: \"remove-image-btn\",\n          children: \"Upload Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCoin,\n          className: \"remove-image-btn\",\n          children: \"Confirm Coin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRemoveImage,\n          className: \"remove-image-btn\",\n          children: \"Remove Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"print-coordinates-btn\",\n          onClick: () => alert(JSON.stringify(coordinates)),\n          children: \"Print Coord\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"undo-rectangle-btn\",\n          onClick: undoLastAction,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleMode,\n          className: \"toggle-mode-btn\",\n          children: mode === \"draw\" ? \"Point Mode\" : \"Draw Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUploadImage,\n          className: \"remove-image-btn\",\n          children: \"Confrim Lesion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUploadImage,\n          className: \"remove-image-btn\",\n          children: \"Print Patch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coordinates-display\",\n      children: [\"Reference Object: \", pixelPerMetric ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"is defined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 83\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Not defined yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coordinates-display\",\n      children: [\"Coordinates: \", coordinates.map((coord, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coordinate-item\",\n        children: [\"Start (\", coord.startX, \", \", coord.startY, \"), End (\", coord.startX + coord.w, \", \", coord.startY + coord.h, \")\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageUploader, \"P0FlYD2KWwv9nrb3CFiiuwjtysA=\");\n_c = ImageUploader;\nexport default ImageUploader;\nvar _c;\n$RefreshReg$(_c, \"ImageUploader\");","map":{"version":3,"names":["React","useRef","useState","axios","jsxDEV","_jsxDEV","baseURL","ImageUploader","_s","imageLoaded","setImageLoaded","coordinates","setCoordinates","imageFile","setImageFile","canvasRef","imageLoaderRef","imgRef","rect","setRect","drag","setDrag","mode","setMode","globalScaleFactor","setGlobalScaleFactor","pixelPerMetric","setPixelPerMetric","handleImage","e","reader","FileReader","target","files","onload","event","img","Image","canvas","current","ctx","getContext","scaleFactor","width","scaledHeight","height","clearRect","drawImage","src","result","readAsDataURL","handleUploadImage","preventDefault","formData","FormData","append","console","log","pair","entries","post","then","response","data","catch","error","handleCoin","RectangleData","x","startX","y","startY","w","h","responseType","base64Image","arrayBufferToBase64","image","imageData","getImageData","i","length","temp","putImageData","buffer","binary","bytes","Uint8Array","byteLength","String","fromCharCode","btoa","handleRemoveImage","value","initDraw","nativeEvent","offsetX","offsetY","fillStyle","beginPath","arc","Math","PI","fill","draw","mouseX","mouseY","strokeStyle","strokeRect","redraw","finishDraw","forEach","coord","undoLastAction","prevCoordinates","newCoordinates","slice","toggleMode","prevMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","onChange","onMouseDown","onMouseMove","onMouseUp","onClick","alert","JSON","stringify","map","index","_c","$RefreshReg$"],"sources":["/Users/reed/keloid/CS-497-keloid/src/ImageUploader.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport './ImageUploader.css';\nimport axios from 'axios';\n\nconst baseURL = \"https://c96b-35-237-123-73.ngrok-free.app/\";\n\nfunction ImageUploader() {\n  const [imageLoaded, setImageLoaded] = useState(false); // New state to track if image is loaded\n  const [coordinates, setCoordinates] = useState([]);\n  const [imageFile, setImageFile] = useState(null); // New state to store the image file\n  const canvasRef = useRef(null);\n  const imageLoaderRef = useRef(null);\n  const imgRef = useRef(null); // Ref to store the loaded image element\n  const [rect, setRect] = useState({});\n  const [drag, setDrag] = useState(false);\n  const [mode, setMode] = useState(\"draw\"); // Default mode is \"draw\"\n  const [globalScaleFactor, setGlobalScaleFactor] = useState(1);\n  const [pixelPerMetric, setPixelPerMetric] = useState(false);\n  // const [originalCanvasSize, setOriginalCanvasSize] = useState([0, 0]);\n\n  const handleImage = (e) => {\n    const reader = new FileReader();\n    setImageFile(e.target.files[0]); // Store the image file in state\n    reader.onload = (event) => {\n      const img = new Image();\n      img.onload = () => {\n        const canvas = canvasRef.current;\n        // setOriginalCanvasSize([canvas.width, canvas.height]);\n        const ctx = canvas.getContext('2d');\n        // ctx.clearRect(0, 0, canvas.width, canvas.height);\n        // console.log('Image loaded:', img.width, img.height);\n        // Use a fixed width for the canvas\n        const scaleFactor = 700 / img.width;\n        setGlobalScaleFactor(scaleFactor);\n        const scaledHeight = img.height * scaleFactor;\n        // const scaleFactor = 700 / img.width;\n        // const scaledHeight = img.height;\n        \n        // Set canvas size\n        canvas.width = 700; \n        canvas.height = scaledHeight;\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(img, 0, 0, canvas.width, scaledHeight);\n        imgRef.current = img;\n        setImageLoaded(true); // Indicate that the image is now loaded\n      };\n      img.src = event.target.result;\n    };\n    \n    reader.readAsDataURL(e.target.files[0]);\n  };\n\n  const handleUploadImage = async (event) => {\n    // const canvas = canvasRef.current;\n  // const imageData = canvas.toDataURL('image/jpeg'); // Convert canvas to base64 data URL\n  event.preventDefault();\n  const formData = new FormData();\n  formData.append('file', imageFile);\n  console.log('Image data:', formData);\n  for (let pair of formData.entries()) {\n    console.log(pair[0] + ': ' + pair[1]);\n  }\n\n  // You can now send the imageData to your backend using Axios or any other HTTP library\n  axios.post(`${baseURL}upload/`, formData )\n    .then(response => {\n      console.log('Image uploaded successfully:', response.data);\n      \n      // const imageUrl = URL.createObjectURL(blob);\n      \n      // Now you can use the imageUrl to display the image in your React component\n      // For example, you can set it as the src attribute of an <img> element\n      // document.getElementById('imageElement').src = imageUrl\n      // Optionally, handle success response\n    })\n    .catch(error => {\n      console.error('Error uploading image:', error);\n      // Optionally, handle error\n    });\n};\n\nconst handleCoin = async (event) => {\n  event.preventDefault();\n  const RectangleData = {\n    x: coordinates[0].startX/globalScaleFactor,\n    y: coordinates[0].startY/globalScaleFactor,\n    width: coordinates[0].w/globalScaleFactor,\n    height: coordinates[0].h/globalScaleFactor\n  };\n  console.log('Rectangle data:', RectangleData);\n  axios.post(`${baseURL}uploadCoin/`, RectangleData, {responseType: 'arraybuffer'})\n    .then(response => {\n      console.log('Image uploaded successfully:', response.data);\n      // const { img, pixelsPerMetric: ppm } = response.data;\n      // console.log('Image:', img);\n      // console.log('Pixels per metric:', ppm);\n      const base64Image = arrayBufferToBase64(response.data);\n      setPixelPerMetric(true);\n      const image = new Image();\n\n        // Set the src of the image to the data received from the backend\n      image.src = `data:image/jpeg;base64,${base64Image}`;\n      image.onload = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n          // Convert BGR to RGB\n          for (let i = 0; i < imageData.data.length; i += 4) {\n            const temp = imageData.data[i];\n            imageData.data[i] = imageData.data[i + 2];\n            imageData.data[i + 2] = temp;\n          }\n          ctx.putImageData(imageData, 0, 0);\n        imgRef.current = image;\n        setImageLoaded(true); // Indicate that the image is now loaded\n      }\n\n      // const blob = new Blob([response.data], { type: 'image/jpeg' });\n      // const canvas = canvasRef.current;\n        // const ctx = canvas.getContext('2d');\n        // \n        // Use a fixed width for the canvas\n        // const scaleFactor = 700 / blob.width;\n        // const scaledHeight = blob.height * scaleFactor;\n        \n        // Set canvas size\n        // canvas.width = blob.width * globalScaleFactor; \n        // canvas.height = blob.height * globalScaleFactor;\n\n        // ctx.clearRect(0, 0, canvas.width, canvas.height);\n        // ctx.drawImage(blob, 0, 0, canvas.width, canvas.height);\n        // imgRef.current = blob;\n        // setImageLoaded(true); // Indicate that the image is now loaded\n    // Create a URL for the blob\n      // Optionally, handle success response\n    })\n    .catch(error => {\n      console.error('Error uploading image:', error);\n      // Optionally, handle error\n    });\n    const arrayBufferToBase64 = (buffer) => {\n      let binary = '';\n      const bytes = new Uint8Array(buffer);\n      for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return btoa(binary);\n    };\n};\n\n  const handleRemoveImage = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    setImageLoaded(false);\n    setCoordinates([]);\n    setRect({});\n    setDrag(false);\n    \n    if (imageLoaderRef.current) {\n      imageLoaderRef.current.value = null;\n    }\n  }\n\n  const initDraw = (event) => {\n    if (!imageLoaded) return; \n    // console.log(event);\n    // console.log(event.nativeEvent);\n    const x = event.nativeEvent.offsetX;\n    const y = event.nativeEvent.offsetY;\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n\n\n    if (mode === \"draw\") {\n      setRect({ startX: x, startY: y, w: 0, h: 0 });\n      setDrag(true);\n    } else if (mode === \"point\") {\n      ctx.fillStyle = 'red';\n      ctx.beginPath();\n      ctx.arc(x, y, 5, 0, Math.PI * 2, true); // Draw a circle\n      ctx.fill();\n\n      setCoordinates([...coordinates, { startX: x, startY: y, w: 0, h: 0 }]);\n    }\n  };\n\n  const draw = (event) => {\n    if (!imageLoaded || !drag || mode !== \"draw\") return;\n    const mouseX = event.nativeEvent.offsetX;\n    const mouseY = event.nativeEvent.offsetY;\n    const width = mouseX - rect.startX;\n    const height = mouseY - rect.startY;\n    setRect({ ...rect, w: width, h: height });\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n    ctx.strokeStyle = 'red';\n    ctx.strokeRect(rect.startX, rect.startY, width, height);\n    redraw(ctx); // Redraw the rectangles after drawing the current rectangle\n\n  };\n\n  const finishDraw = () => {\n    if (!imageLoaded || mode === \"point\") return; // Skip if in point mode\n    setDrag(false);\n    setCoordinates([...coordinates, rect]);\n  };\n\n  const redraw= (ctx) => {\n    coordinates.forEach(coord => {\n      if (coord.w === 0 && coord.h === 0) {\n        ctx.fillStyle = 'red';\n        ctx.beginPath();\n        ctx.arc(coord.startX, coord.startY, 5, 0, 2 * Math.PI);\n        ctx.fill();\n      } else {\n        ctx.strokeStyle = 'red';\n        ctx.strokeRect(coord.startX, coord.startY, coord.w, coord.h);\n      }\n  });\n};\n\n  const undoLastAction = () => {\n    setCoordinates(prevCoordinates => {\n      const newCoordinates = prevCoordinates.slice(0, -1);\n  \n      // Redraw the canvas\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(imgRef.current, 0, 0, canvas.width, canvas.height);\n      \n      // Redraw all the elements except the last one\n      newCoordinates.forEach(coord => {\n        if (coord.w === 0 && coord.h === 0) {\n          ctx.fillStyle = 'red';\n          ctx.beginPath();\n          ctx.arc(coord.startX, coord.startY, 5, 0, Math.PI * 2);\n          ctx.fill();\n        } else {\n          ctx.strokeStyle = 'red';\n          ctx.strokeRect(coord.startX, coord.startY, coord.w, coord.h);\n        }\n      });\n  \n      return newCoordinates;\n    });\n    \n  };\n\n  const toggleMode = () => {\n    setMode(prevMode => prevMode === \"draw\" ? \"point\" : \"draw\");\n  };\n  \n\n  return (\n    <div className=\"keloid-detector-container\">\n      <h3>Mode: {mode === \"draw\" ? \"Drawing Rectangles\" : \"Selecting Points\"}</h3>\n\n      <input type=\"file\" ref={imageLoaderRef} onChange={handleImage} className=\"file-input\" />\n      <canvas ref={canvasRef} onMouseDown={initDraw} onMouseMove={draw} onMouseUp={finishDraw} className=\"image-canvas\"></canvas>\n      <div className=\"button-grid\">\n      <div className=\"column\">\n        <button onClick={handleUploadImage} className=\"remove-image-btn\">Upload Image</button>\n        <button onClick={handleCoin} className=\"remove-image-btn\">Confirm Coin</button>\n        <button onClick={handleRemoveImage} className=\"remove-image-btn\">Remove Image</button>\n        <button className=\"print-coordinates-btn\" onClick={() => alert(JSON.stringify(coordinates))}>Print Coord</button>\n      </div>\n      <div className=\"column\">\n        <button className=\"undo-rectangle-btn\" onClick={undoLastAction}>Undo</button>\n        <button onClick={toggleMode} className=\"toggle-mode-btn\">\n          {mode === \"draw\" ? \"Point Mode\" : \"Draw Mode\"}\n        </button>\n        <button onClick={handleUploadImage} className=\"remove-image-btn\">Confrim Lesion</button>\n        <button onClick={handleUploadImage} className=\"remove-image-btn\">Print Patch</button>\n        </div>\n        </div>\n        <div className=\"coordinates-display\">Reference Object: {pixelPerMetric ? (<p>is defined</p>) \n        : (<p>Not defined yet</p>)}</div>\n        <div className=\"coordinates-display\">Coordinates: {coordinates.map((coord, index) => (\n          <div key={index} className=\"coordinate-item\">\n            Start ({coord.startX}, {coord.startY}), End ({coord.startX + coord.w}, {coord.startY + coord.h})\n          </div>\n      ))}</div>\n    </div>\n  );\n}\n\nexport default ImageUploader;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}